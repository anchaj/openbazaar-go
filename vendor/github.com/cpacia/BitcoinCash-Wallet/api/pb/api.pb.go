// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api.proto

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	api.proto

It has these top-level messages:
	Empty
	KeySelection
	Address
	Height
	Balances
	Key
	Keys
	Addresses
	BoolResponse
	NetParams
	TransactionList
	Tx
	Txid
	FeeLevelSelection
	FeePerByte
	Fee
	SpendInfo
	PeerList
	Peer
	Confirmations
	Utxo
	SweepInfo
	Input
	Output
	Signature
	CreateMultisigInfo
	SignatureList
	MultisignInfo
	RawTx
	EstimateFeeData
	Header
	ImportedKey
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type KeyPurpose int32

const (
	KeyPurpose_INTERNAL KeyPurpose = 0
	KeyPurpose_EXTERNAL KeyPurpose = 1
)

var KeyPurpose_name = map[int32]string{
	0: "INTERNAL",
	1: "EXTERNAL",
}
var KeyPurpose_value = map[string]int32{
	"INTERNAL": 0,
	"EXTERNAL": 1,
}

func (x KeyPurpose) String() string {
	return proto.EnumName(KeyPurpose_name, int32(x))
}
func (KeyPurpose) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type FeeLevel int32

const (
	FeeLevel_ECONOMIC FeeLevel = 0
	FeeLevel_NORMAL   FeeLevel = 1
	FeeLevel_PRIORITY FeeLevel = 2
)

var FeeLevel_name = map[int32]string{
	0: "ECONOMIC",
	1: "NORMAL",
	2: "PRIORITY",
}
var FeeLevel_value = map[string]int32{
	"ECONOMIC": 0,
	"NORMAL":   1,
	"PRIORITY": 2,
}

func (x FeeLevel) String() string {
	return proto.EnumName(FeeLevel_name, int32(x))
}
func (FeeLevel) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type KeySelection struct {
	Purpose KeyPurpose `protobuf:"varint,1,opt,name=purpose,enum=pb.KeyPurpose" json:"purpose,omitempty"`
}

func (m *KeySelection) Reset()                    { *m = KeySelection{} }
func (m *KeySelection) String() string            { return proto.CompactTextString(m) }
func (*KeySelection) ProtoMessage()               {}
func (*KeySelection) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *KeySelection) GetPurpose() KeyPurpose {
	if m != nil {
		return m.Purpose
	}
	return KeyPurpose_INTERNAL
}

type Address struct {
	Addr string `protobuf:"bytes,1,opt,name=addr" json:"addr,omitempty"`
}

func (m *Address) Reset()                    { *m = Address{} }
func (m *Address) String() string            { return proto.CompactTextString(m) }
func (*Address) ProtoMessage()               {}
func (*Address) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Address) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

type Height struct {
	Height uint32 `protobuf:"varint,1,opt,name=height" json:"height,omitempty"`
}

func (m *Height) Reset()                    { *m = Height{} }
func (m *Height) String() string            { return proto.CompactTextString(m) }
func (*Height) ProtoMessage()               {}
func (*Height) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Height) GetHeight() uint32 {
	if m != nil {
		return m.Height
	}
	return 0
}

type Balances struct {
	Confirmed   uint64 `protobuf:"varint,1,opt,name=confirmed" json:"confirmed,omitempty"`
	Unconfirmed uint64 `protobuf:"varint,2,opt,name=unconfirmed" json:"unconfirmed,omitempty"`
}

func (m *Balances) Reset()                    { *m = Balances{} }
func (m *Balances) String() string            { return proto.CompactTextString(m) }
func (*Balances) ProtoMessage()               {}
func (*Balances) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Balances) GetConfirmed() uint64 {
	if m != nil {
		return m.Confirmed
	}
	return 0
}

func (m *Balances) GetUnconfirmed() uint64 {
	if m != nil {
		return m.Unconfirmed
	}
	return 0
}

type Key struct {
	Key string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
}

func (m *Key) Reset()                    { *m = Key{} }
func (m *Key) String() string            { return proto.CompactTextString(m) }
func (*Key) ProtoMessage()               {}
func (*Key) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Key) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type Keys struct {
	Keys []*Key `protobuf:"bytes,1,rep,name=keys" json:"keys,omitempty"`
}

func (m *Keys) Reset()                    { *m = Keys{} }
func (m *Keys) String() string            { return proto.CompactTextString(m) }
func (*Keys) ProtoMessage()               {}
func (*Keys) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Keys) GetKeys() []*Key {
	if m != nil {
		return m.Keys
	}
	return nil
}

type Addresses struct {
	Addresses []*Address `protobuf:"bytes,1,rep,name=addresses" json:"addresses,omitempty"`
}

func (m *Addresses) Reset()                    { *m = Addresses{} }
func (m *Addresses) String() string            { return proto.CompactTextString(m) }
func (*Addresses) ProtoMessage()               {}
func (*Addresses) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *Addresses) GetAddresses() []*Address {
	if m != nil {
		return m.Addresses
	}
	return nil
}

type BoolResponse struct {
	Bool bool `protobuf:"varint,1,opt,name=bool" json:"bool,omitempty"`
}

func (m *BoolResponse) Reset()                    { *m = BoolResponse{} }
func (m *BoolResponse) String() string            { return proto.CompactTextString(m) }
func (*BoolResponse) ProtoMessage()               {}
func (*BoolResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *BoolResponse) GetBool() bool {
	if m != nil {
		return m.Bool
	}
	return false
}

type NetParams struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *NetParams) Reset()                    { *m = NetParams{} }
func (m *NetParams) String() string            { return proto.CompactTextString(m) }
func (*NetParams) ProtoMessage()               {}
func (*NetParams) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *NetParams) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type TransactionList struct {
	Transactions []*Tx `protobuf:"bytes,1,rep,name=transactions" json:"transactions,omitempty"`
}

func (m *TransactionList) Reset()                    { *m = TransactionList{} }
func (m *TransactionList) String() string            { return proto.CompactTextString(m) }
func (*TransactionList) ProtoMessage()               {}
func (*TransactionList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *TransactionList) GetTransactions() []*Tx {
	if m != nil {
		return m.Transactions
	}
	return nil
}

type Tx struct {
	Txid      string                     `protobuf:"bytes,1,opt,name=txid" json:"txid,omitempty"`
	Value     int64                      `protobuf:"varint,2,opt,name=value" json:"value,omitempty"`
	Height    int32                      `protobuf:"varint,3,opt,name=height" json:"height,omitempty"`
	Timestamp *google_protobuf.Timestamp `protobuf:"bytes,4,opt,name=timestamp" json:"timestamp,omitempty"`
	WatchOnly bool                       `protobuf:"varint,5,opt,name=watchOnly" json:"watchOnly,omitempty"`
	Raw       []byte                     `protobuf:"bytes,6,opt,name=raw,proto3" json:"raw,omitempty"`
}

func (m *Tx) Reset()                    { *m = Tx{} }
func (m *Tx) String() string            { return proto.CompactTextString(m) }
func (*Tx) ProtoMessage()               {}
func (*Tx) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *Tx) GetTxid() string {
	if m != nil {
		return m.Txid
	}
	return ""
}

func (m *Tx) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *Tx) GetHeight() int32 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *Tx) GetTimestamp() *google_protobuf.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *Tx) GetWatchOnly() bool {
	if m != nil {
		return m.WatchOnly
	}
	return false
}

func (m *Tx) GetRaw() []byte {
	if m != nil {
		return m.Raw
	}
	return nil
}

type Txid struct {
	Hash string `protobuf:"bytes,1,opt,name=hash" json:"hash,omitempty"`
}

func (m *Txid) Reset()                    { *m = Txid{} }
func (m *Txid) String() string            { return proto.CompactTextString(m) }
func (*Txid) ProtoMessage()               {}
func (*Txid) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *Txid) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

type FeeLevelSelection struct {
	FeeLevel FeeLevel `protobuf:"varint,1,opt,name=feeLevel,enum=pb.FeeLevel" json:"feeLevel,omitempty"`
}

func (m *FeeLevelSelection) Reset()                    { *m = FeeLevelSelection{} }
func (m *FeeLevelSelection) String() string            { return proto.CompactTextString(m) }
func (*FeeLevelSelection) ProtoMessage()               {}
func (*FeeLevelSelection) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *FeeLevelSelection) GetFeeLevel() FeeLevel {
	if m != nil {
		return m.FeeLevel
	}
	return FeeLevel_ECONOMIC
}

type FeePerByte struct {
	Fee uint64 `protobuf:"varint,1,opt,name=fee" json:"fee,omitempty"`
}

func (m *FeePerByte) Reset()                    { *m = FeePerByte{} }
func (m *FeePerByte) String() string            { return proto.CompactTextString(m) }
func (*FeePerByte) ProtoMessage()               {}
func (*FeePerByte) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *FeePerByte) GetFee() uint64 {
	if m != nil {
		return m.Fee
	}
	return 0
}

type Fee struct {
	Fee uint64 `protobuf:"varint,1,opt,name=fee" json:"fee,omitempty"`
}

func (m *Fee) Reset()                    { *m = Fee{} }
func (m *Fee) String() string            { return proto.CompactTextString(m) }
func (*Fee) ProtoMessage()               {}
func (*Fee) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *Fee) GetFee() uint64 {
	if m != nil {
		return m.Fee
	}
	return 0
}

type SpendInfo struct {
	Address  string   `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
	Amount   uint64   `protobuf:"varint,2,opt,name=amount" json:"amount,omitempty"`
	FeeLevel FeeLevel `protobuf:"varint,3,opt,name=feeLevel,enum=pb.FeeLevel" json:"feeLevel,omitempty"`
}

func (m *SpendInfo) Reset()                    { *m = SpendInfo{} }
func (m *SpendInfo) String() string            { return proto.CompactTextString(m) }
func (*SpendInfo) ProtoMessage()               {}
func (*SpendInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *SpendInfo) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *SpendInfo) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *SpendInfo) GetFeeLevel() FeeLevel {
	if m != nil {
		return m.FeeLevel
	}
	return FeeLevel_ECONOMIC
}

type PeerList struct {
	Peers []*Peer `protobuf:"bytes,1,rep,name=peers" json:"peers,omitempty"`
}

func (m *PeerList) Reset()                    { *m = PeerList{} }
func (m *PeerList) String() string            { return proto.CompactTextString(m) }
func (*PeerList) ProtoMessage()               {}
func (*PeerList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *PeerList) GetPeers() []*Peer {
	if m != nil {
		return m.Peers
	}
	return nil
}

type Peer struct {
	Address         string                     `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
	BytesSent       uint64                     `protobuf:"varint,2,opt,name=bytesSent" json:"bytesSent,omitempty"`
	BytesReceived   uint64                     `protobuf:"varint,3,opt,name=bytesReceived" json:"bytesReceived,omitempty"`
	Connected       bool                       `protobuf:"varint,4,opt,name=connected" json:"connected,omitempty"`
	ID              int32                      `protobuf:"varint,5,opt,name=ID" json:"ID,omitempty"`
	LastBlock       int32                      `protobuf:"varint,6,opt,name=lastBlock" json:"lastBlock,omitempty"`
	ProtocolVersion uint32                     `protobuf:"varint,7,opt,name=protocolVersion" json:"protocolVersion,omitempty"`
	Services        string                     `protobuf:"bytes,8,opt,name=services" json:"services,omitempty"`
	UserAgent       string                     `protobuf:"bytes,9,opt,name=userAgent" json:"userAgent,omitempty"`
	TimeConnected   *google_protobuf.Timestamp `protobuf:"bytes,10,opt,name=timeConnected" json:"timeConnected,omitempty"`
}

func (m *Peer) Reset()                    { *m = Peer{} }
func (m *Peer) String() string            { return proto.CompactTextString(m) }
func (*Peer) ProtoMessage()               {}
func (*Peer) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *Peer) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Peer) GetBytesSent() uint64 {
	if m != nil {
		return m.BytesSent
	}
	return 0
}

func (m *Peer) GetBytesReceived() uint64 {
	if m != nil {
		return m.BytesReceived
	}
	return 0
}

func (m *Peer) GetConnected() bool {
	if m != nil {
		return m.Connected
	}
	return false
}

func (m *Peer) GetID() int32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Peer) GetLastBlock() int32 {
	if m != nil {
		return m.LastBlock
	}
	return 0
}

func (m *Peer) GetProtocolVersion() uint32 {
	if m != nil {
		return m.ProtocolVersion
	}
	return 0
}

func (m *Peer) GetServices() string {
	if m != nil {
		return m.Services
	}
	return ""
}

func (m *Peer) GetUserAgent() string {
	if m != nil {
		return m.UserAgent
	}
	return ""
}

func (m *Peer) GetTimeConnected() *google_protobuf.Timestamp {
	if m != nil {
		return m.TimeConnected
	}
	return nil
}

type Confirmations struct {
	Confirmations uint32 `protobuf:"varint,1,opt,name=confirmations" json:"confirmations,omitempty"`
}

func (m *Confirmations) Reset()                    { *m = Confirmations{} }
func (m *Confirmations) String() string            { return proto.CompactTextString(m) }
func (*Confirmations) ProtoMessage()               {}
func (*Confirmations) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *Confirmations) GetConfirmations() uint32 {
	if m != nil {
		return m.Confirmations
	}
	return 0
}

type Utxo struct {
	Txid  string `protobuf:"bytes,1,opt,name=txid" json:"txid,omitempty"`
	Index uint32 `protobuf:"varint,2,opt,name=index" json:"index,omitempty"`
	Value uint64 `protobuf:"varint,3,opt,name=value" json:"value,omitempty"`
}

func (m *Utxo) Reset()                    { *m = Utxo{} }
func (m *Utxo) String() string            { return proto.CompactTextString(m) }
func (*Utxo) ProtoMessage()               {}
func (*Utxo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *Utxo) GetTxid() string {
	if m != nil {
		return m.Txid
	}
	return ""
}

func (m *Utxo) GetIndex() uint32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *Utxo) GetValue() uint64 {
	if m != nil {
		return m.Value
	}
	return 0
}

type SweepInfo struct {
	Utxos        []*Utxo  `protobuf:"bytes,1,rep,name=utxos" json:"utxos,omitempty"`
	Address      string   `protobuf:"bytes,2,opt,name=address" json:"address,omitempty"`
	Key          string   `protobuf:"bytes,3,opt,name=key" json:"key,omitempty"`
	RedeemScript []byte   `protobuf:"bytes,4,opt,name=redeemScript,proto3" json:"redeemScript,omitempty"`
	FeeLevel     FeeLevel `protobuf:"varint,5,opt,name=feeLevel,enum=pb.FeeLevel" json:"feeLevel,omitempty"`
}

func (m *SweepInfo) Reset()                    { *m = SweepInfo{} }
func (m *SweepInfo) String() string            { return proto.CompactTextString(m) }
func (*SweepInfo) ProtoMessage()               {}
func (*SweepInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *SweepInfo) GetUtxos() []*Utxo {
	if m != nil {
		return m.Utxos
	}
	return nil
}

func (m *SweepInfo) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *SweepInfo) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *SweepInfo) GetRedeemScript() []byte {
	if m != nil {
		return m.RedeemScript
	}
	return nil
}

func (m *SweepInfo) GetFeeLevel() FeeLevel {
	if m != nil {
		return m.FeeLevel
	}
	return FeeLevel_ECONOMIC
}

type Input struct {
	Txid  string `protobuf:"bytes,1,opt,name=txid" json:"txid,omitempty"`
	Index uint32 `protobuf:"varint,2,opt,name=index" json:"index,omitempty"`
}

func (m *Input) Reset()                    { *m = Input{} }
func (m *Input) String() string            { return proto.CompactTextString(m) }
func (*Input) ProtoMessage()               {}
func (*Input) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *Input) GetTxid() string {
	if m != nil {
		return m.Txid
	}
	return ""
}

func (m *Input) GetIndex() uint32 {
	if m != nil {
		return m.Index
	}
	return 0
}

type Output struct {
	ScriptPubKey []byte `protobuf:"bytes,1,opt,name=scriptPubKey,proto3" json:"scriptPubKey,omitempty"`
	Value        uint64 `protobuf:"varint,2,opt,name=value" json:"value,omitempty"`
}

func (m *Output) Reset()                    { *m = Output{} }
func (m *Output) String() string            { return proto.CompactTextString(m) }
func (*Output) ProtoMessage()               {}
func (*Output) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *Output) GetScriptPubKey() []byte {
	if m != nil {
		return m.ScriptPubKey
	}
	return nil
}

func (m *Output) GetValue() uint64 {
	if m != nil {
		return m.Value
	}
	return 0
}

type Signature struct {
	Index     uint32 `protobuf:"varint,1,opt,name=index" json:"index,omitempty"`
	Signature []byte `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *Signature) Reset()                    { *m = Signature{} }
func (m *Signature) String() string            { return proto.CompactTextString(m) }
func (*Signature) ProtoMessage()               {}
func (*Signature) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *Signature) GetIndex() uint32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *Signature) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

type CreateMultisigInfo struct {
	Inputs       []*Input  `protobuf:"bytes,1,rep,name=inputs" json:"inputs,omitempty"`
	Outputs      []*Output `protobuf:"bytes,2,rep,name=outputs" json:"outputs,omitempty"`
	Key          string    `protobuf:"bytes,3,opt,name=key" json:"key,omitempty"`
	RedeemScript []byte    `protobuf:"bytes,4,opt,name=redeemScript,proto3" json:"redeemScript,omitempty"`
	FeePerByte   uint64    `protobuf:"varint,5,opt,name=feePerByte" json:"feePerByte,omitempty"`
}

func (m *CreateMultisigInfo) Reset()                    { *m = CreateMultisigInfo{} }
func (m *CreateMultisigInfo) String() string            { return proto.CompactTextString(m) }
func (*CreateMultisigInfo) ProtoMessage()               {}
func (*CreateMultisigInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *CreateMultisigInfo) GetInputs() []*Input {
	if m != nil {
		return m.Inputs
	}
	return nil
}

func (m *CreateMultisigInfo) GetOutputs() []*Output {
	if m != nil {
		return m.Outputs
	}
	return nil
}

func (m *CreateMultisigInfo) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *CreateMultisigInfo) GetRedeemScript() []byte {
	if m != nil {
		return m.RedeemScript
	}
	return nil
}

func (m *CreateMultisigInfo) GetFeePerByte() uint64 {
	if m != nil {
		return m.FeePerByte
	}
	return 0
}

type SignatureList struct {
	Sigs []*Signature `protobuf:"bytes,1,rep,name=sigs" json:"sigs,omitempty"`
}

func (m *SignatureList) Reset()                    { *m = SignatureList{} }
func (m *SignatureList) String() string            { return proto.CompactTextString(m) }
func (*SignatureList) ProtoMessage()               {}
func (*SignatureList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *SignatureList) GetSigs() []*Signature {
	if m != nil {
		return m.Sigs
	}
	return nil
}

type MultisignInfo struct {
	Inputs       []*Input     `protobuf:"bytes,1,rep,name=inputs" json:"inputs,omitempty"`
	Outputs      []*Output    `protobuf:"bytes,2,rep,name=outputs" json:"outputs,omitempty"`
	Sig1         []*Signature `protobuf:"bytes,3,rep,name=sig1" json:"sig1,omitempty"`
	Sig2         []*Signature `protobuf:"bytes,4,rep,name=sig2" json:"sig2,omitempty"`
	RedeemScript []byte       `protobuf:"bytes,5,opt,name=redeemScript,proto3" json:"redeemScript,omitempty"`
	FeePerByte   uint64       `protobuf:"varint,6,opt,name=feePerByte" json:"feePerByte,omitempty"`
	Broadcast    bool         `protobuf:"varint,7,opt,name=broadcast" json:"broadcast,omitempty"`
}

func (m *MultisignInfo) Reset()                    { *m = MultisignInfo{} }
func (m *MultisignInfo) String() string            { return proto.CompactTextString(m) }
func (*MultisignInfo) ProtoMessage()               {}
func (*MultisignInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *MultisignInfo) GetInputs() []*Input {
	if m != nil {
		return m.Inputs
	}
	return nil
}

func (m *MultisignInfo) GetOutputs() []*Output {
	if m != nil {
		return m.Outputs
	}
	return nil
}

func (m *MultisignInfo) GetSig1() []*Signature {
	if m != nil {
		return m.Sig1
	}
	return nil
}

func (m *MultisignInfo) GetSig2() []*Signature {
	if m != nil {
		return m.Sig2
	}
	return nil
}

func (m *MultisignInfo) GetRedeemScript() []byte {
	if m != nil {
		return m.RedeemScript
	}
	return nil
}

func (m *MultisignInfo) GetFeePerByte() uint64 {
	if m != nil {
		return m.FeePerByte
	}
	return 0
}

func (m *MultisignInfo) GetBroadcast() bool {
	if m != nil {
		return m.Broadcast
	}
	return false
}

type RawTx struct {
	Tx []byte `protobuf:"bytes,1,opt,name=tx,proto3" json:"tx,omitempty"`
}

func (m *RawTx) Reset()                    { *m = RawTx{} }
func (m *RawTx) String() string            { return proto.CompactTextString(m) }
func (*RawTx) ProtoMessage()               {}
func (*RawTx) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *RawTx) GetTx() []byte {
	if m != nil {
		return m.Tx
	}
	return nil
}

type EstimateFeeData struct {
	Inputs     []*Input  `protobuf:"bytes,1,rep,name=inputs" json:"inputs,omitempty"`
	Outputs    []*Output `protobuf:"bytes,2,rep,name=outputs" json:"outputs,omitempty"`
	FeePerByte uint64    `protobuf:"varint,3,opt,name=feePerByte" json:"feePerByte,omitempty"`
}

func (m *EstimateFeeData) Reset()                    { *m = EstimateFeeData{} }
func (m *EstimateFeeData) String() string            { return proto.CompactTextString(m) }
func (*EstimateFeeData) ProtoMessage()               {}
func (*EstimateFeeData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *EstimateFeeData) GetInputs() []*Input {
	if m != nil {
		return m.Inputs
	}
	return nil
}

func (m *EstimateFeeData) GetOutputs() []*Output {
	if m != nil {
		return m.Outputs
	}
	return nil
}

func (m *EstimateFeeData) GetFeePerByte() uint64 {
	if m != nil {
		return m.FeePerByte
	}
	return 0
}

type Header struct {
	Entry string `protobuf:"bytes,1,opt,name=entry" json:"entry,omitempty"`
}

func (m *Header) Reset()                    { *m = Header{} }
func (m *Header) String() string            { return proto.CompactTextString(m) }
func (*Header) ProtoMessage()               {}
func (*Header) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *Header) GetEntry() string {
	if m != nil {
		return m.Entry
	}
	return ""
}

type ImportedKey struct {
	Key          string                     `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	CreationDate *google_protobuf.Timestamp `protobuf:"bytes,2,opt,name=creationDate" json:"creationDate,omitempty"`
}

func (m *ImportedKey) Reset()                    { *m = ImportedKey{} }
func (m *ImportedKey) String() string            { return proto.CompactTextString(m) }
func (*ImportedKey) ProtoMessage()               {}
func (*ImportedKey) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

func (m *ImportedKey) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *ImportedKey) GetCreationDate() *google_protobuf.Timestamp {
	if m != nil {
		return m.CreationDate
	}
	return nil
}

func init() {
	proto.RegisterType((*Empty)(nil), "pb.Empty")
	proto.RegisterType((*KeySelection)(nil), "pb.KeySelection")
	proto.RegisterType((*Address)(nil), "pb.Address")
	proto.RegisterType((*Height)(nil), "pb.Height")
	proto.RegisterType((*Balances)(nil), "pb.Balances")
	proto.RegisterType((*Key)(nil), "pb.Key")
	proto.RegisterType((*Keys)(nil), "pb.Keys")
	proto.RegisterType((*Addresses)(nil), "pb.Addresses")
	proto.RegisterType((*BoolResponse)(nil), "pb.BoolResponse")
	proto.RegisterType((*NetParams)(nil), "pb.NetParams")
	proto.RegisterType((*TransactionList)(nil), "pb.TransactionList")
	proto.RegisterType((*Tx)(nil), "pb.Tx")
	proto.RegisterType((*Txid)(nil), "pb.Txid")
	proto.RegisterType((*FeeLevelSelection)(nil), "pb.FeeLevelSelection")
	proto.RegisterType((*FeePerByte)(nil), "pb.FeePerByte")
	proto.RegisterType((*Fee)(nil), "pb.Fee")
	proto.RegisterType((*SpendInfo)(nil), "pb.SpendInfo")
	proto.RegisterType((*PeerList)(nil), "pb.PeerList")
	proto.RegisterType((*Peer)(nil), "pb.Peer")
	proto.RegisterType((*Confirmations)(nil), "pb.Confirmations")
	proto.RegisterType((*Utxo)(nil), "pb.Utxo")
	proto.RegisterType((*SweepInfo)(nil), "pb.SweepInfo")
	proto.RegisterType((*Input)(nil), "pb.Input")
	proto.RegisterType((*Output)(nil), "pb.Output")
	proto.RegisterType((*Signature)(nil), "pb.Signature")
	proto.RegisterType((*CreateMultisigInfo)(nil), "pb.CreateMultisigInfo")
	proto.RegisterType((*SignatureList)(nil), "pb.SignatureList")
	proto.RegisterType((*MultisignInfo)(nil), "pb.MultisignInfo")
	proto.RegisterType((*RawTx)(nil), "pb.RawTx")
	proto.RegisterType((*EstimateFeeData)(nil), "pb.EstimateFeeData")
	proto.RegisterType((*Header)(nil), "pb.Header")
	proto.RegisterType((*ImportedKey)(nil), "pb.ImportedKey")
	proto.RegisterEnum("pb.KeyPurpose", KeyPurpose_name, KeyPurpose_value)
	proto.RegisterEnum("pb.FeeLevel", FeeLevel_name, FeeLevel_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for API service

type APIClient interface {
	Stop(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	CurrentAddress(ctx context.Context, in *KeySelection, opts ...grpc.CallOption) (*Address, error)
	NewAddress(ctx context.Context, in *KeySelection, opts ...grpc.CallOption) (*Address, error)
	ChainTip(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Height, error)
	Balance(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Balances, error)
	MasterPrivateKey(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Key, error)
	MasterPublicKey(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Key, error)
	HasKey(ctx context.Context, in *Address, opts ...grpc.CallOption) (*BoolResponse, error)
	Params(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*NetParams, error)
	Transactions(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*TransactionList, error)
	GetTransaction(ctx context.Context, in *Txid, opts ...grpc.CallOption) (*Tx, error)
	GetFeePerByte(ctx context.Context, in *FeeLevelSelection, opts ...grpc.CallOption) (*FeePerByte, error)
	Spend(ctx context.Context, in *SpendInfo, opts ...grpc.CallOption) (*Txid, error)
	BumpFee(ctx context.Context, in *Txid, opts ...grpc.CallOption) (*Txid, error)
	Peers(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PeerList, error)
	AddWatchedAddress(ctx context.Context, in *Address, opts ...grpc.CallOption) (*Empty, error)
	GetConfirmations(ctx context.Context, in *Txid, opts ...grpc.CallOption) (*Confirmations, error)
	SweepAddress(ctx context.Context, in *SweepInfo, opts ...grpc.CallOption) (*Txid, error)
	ReSyncBlockchain(ctx context.Context, in *Height, opts ...grpc.CallOption) (*Empty, error)
	CreateMultisigSignature(ctx context.Context, in *CreateMultisigInfo, opts ...grpc.CallOption) (*SignatureList, error)
	Multisign(ctx context.Context, in *MultisignInfo, opts ...grpc.CallOption) (*RawTx, error)
	EstimateFee(ctx context.Context, in *EstimateFeeData, opts ...grpc.CallOption) (*Fee, error)
	GetKey(ctx context.Context, in *Address, opts ...grpc.CallOption) (*Key, error)
	ListKeys(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Keys, error)
	ListAddresses(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Addresses, error)
	ImportKey(ctx context.Context, in *ImportedKey, opts ...grpc.CallOption) (*Empty, error)
	WalletNotify(ctx context.Context, in *Empty, opts ...grpc.CallOption) (API_WalletNotifyClient, error)
	DumpHeaders(ctx context.Context, in *Empty, opts ...grpc.CallOption) (API_DumpHeadersClient, error)
}

type aPIClient struct {
	cc *grpc.ClientConn
}

func NewAPIClient(cc *grpc.ClientConn) APIClient {
	return &aPIClient{cc}
}

func (c *aPIClient) Stop(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/pb.API/Stop", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) CurrentAddress(ctx context.Context, in *KeySelection, opts ...grpc.CallOption) (*Address, error) {
	out := new(Address)
	err := grpc.Invoke(ctx, "/pb.API/CurrentAddress", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) NewAddress(ctx context.Context, in *KeySelection, opts ...grpc.CallOption) (*Address, error) {
	out := new(Address)
	err := grpc.Invoke(ctx, "/pb.API/NewAddress", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ChainTip(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Height, error) {
	out := new(Height)
	err := grpc.Invoke(ctx, "/pb.API/ChainTip", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) Balance(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Balances, error) {
	out := new(Balances)
	err := grpc.Invoke(ctx, "/pb.API/Balance", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) MasterPrivateKey(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Key, error) {
	out := new(Key)
	err := grpc.Invoke(ctx, "/pb.API/MasterPrivateKey", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) MasterPublicKey(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Key, error) {
	out := new(Key)
	err := grpc.Invoke(ctx, "/pb.API/MasterPublicKey", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) HasKey(ctx context.Context, in *Address, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := grpc.Invoke(ctx, "/pb.API/HasKey", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) Params(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*NetParams, error) {
	out := new(NetParams)
	err := grpc.Invoke(ctx, "/pb.API/Params", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) Transactions(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*TransactionList, error) {
	out := new(TransactionList)
	err := grpc.Invoke(ctx, "/pb.API/Transactions", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetTransaction(ctx context.Context, in *Txid, opts ...grpc.CallOption) (*Tx, error) {
	out := new(Tx)
	err := grpc.Invoke(ctx, "/pb.API/GetTransaction", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetFeePerByte(ctx context.Context, in *FeeLevelSelection, opts ...grpc.CallOption) (*FeePerByte, error) {
	out := new(FeePerByte)
	err := grpc.Invoke(ctx, "/pb.API/GetFeePerByte", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) Spend(ctx context.Context, in *SpendInfo, opts ...grpc.CallOption) (*Txid, error) {
	out := new(Txid)
	err := grpc.Invoke(ctx, "/pb.API/Spend", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) BumpFee(ctx context.Context, in *Txid, opts ...grpc.CallOption) (*Txid, error) {
	out := new(Txid)
	err := grpc.Invoke(ctx, "/pb.API/BumpFee", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) Peers(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PeerList, error) {
	out := new(PeerList)
	err := grpc.Invoke(ctx, "/pb.API/Peers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) AddWatchedAddress(ctx context.Context, in *Address, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/pb.API/AddWatchedAddress", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetConfirmations(ctx context.Context, in *Txid, opts ...grpc.CallOption) (*Confirmations, error) {
	out := new(Confirmations)
	err := grpc.Invoke(ctx, "/pb.API/GetConfirmations", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) SweepAddress(ctx context.Context, in *SweepInfo, opts ...grpc.CallOption) (*Txid, error) {
	out := new(Txid)
	err := grpc.Invoke(ctx, "/pb.API/SweepAddress", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ReSyncBlockchain(ctx context.Context, in *Height, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/pb.API/ReSyncBlockchain", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) CreateMultisigSignature(ctx context.Context, in *CreateMultisigInfo, opts ...grpc.CallOption) (*SignatureList, error) {
	out := new(SignatureList)
	err := grpc.Invoke(ctx, "/pb.API/CreateMultisigSignature", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) Multisign(ctx context.Context, in *MultisignInfo, opts ...grpc.CallOption) (*RawTx, error) {
	out := new(RawTx)
	err := grpc.Invoke(ctx, "/pb.API/Multisign", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) EstimateFee(ctx context.Context, in *EstimateFeeData, opts ...grpc.CallOption) (*Fee, error) {
	out := new(Fee)
	err := grpc.Invoke(ctx, "/pb.API/EstimateFee", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetKey(ctx context.Context, in *Address, opts ...grpc.CallOption) (*Key, error) {
	out := new(Key)
	err := grpc.Invoke(ctx, "/pb.API/GetKey", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ListKeys(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Keys, error) {
	out := new(Keys)
	err := grpc.Invoke(ctx, "/pb.API/ListKeys", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ListAddresses(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Addresses, error) {
	out := new(Addresses)
	err := grpc.Invoke(ctx, "/pb.API/ListAddresses", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ImportKey(ctx context.Context, in *ImportedKey, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/pb.API/ImportKey", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) WalletNotify(ctx context.Context, in *Empty, opts ...grpc.CallOption) (API_WalletNotifyClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_API_serviceDesc.Streams[0], c.cc, "/pb.API/WalletNotify", opts...)
	if err != nil {
		return nil, err
	}
	x := &aPIWalletNotifyClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type API_WalletNotifyClient interface {
	Recv() (*Tx, error)
	grpc.ClientStream
}

type aPIWalletNotifyClient struct {
	grpc.ClientStream
}

func (x *aPIWalletNotifyClient) Recv() (*Tx, error) {
	m := new(Tx)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *aPIClient) DumpHeaders(ctx context.Context, in *Empty, opts ...grpc.CallOption) (API_DumpHeadersClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_API_serviceDesc.Streams[1], c.cc, "/pb.API/DumpHeaders", opts...)
	if err != nil {
		return nil, err
	}
	x := &aPIDumpHeadersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type API_DumpHeadersClient interface {
	Recv() (*Header, error)
	grpc.ClientStream
}

type aPIDumpHeadersClient struct {
	grpc.ClientStream
}

func (x *aPIDumpHeadersClient) Recv() (*Header, error) {
	m := new(Header)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for API service

type APIServer interface {
	Stop(context.Context, *Empty) (*Empty, error)
	CurrentAddress(context.Context, *KeySelection) (*Address, error)
	NewAddress(context.Context, *KeySelection) (*Address, error)
	ChainTip(context.Context, *Empty) (*Height, error)
	Balance(context.Context, *Empty) (*Balances, error)
	MasterPrivateKey(context.Context, *Empty) (*Key, error)
	MasterPublicKey(context.Context, *Empty) (*Key, error)
	HasKey(context.Context, *Address) (*BoolResponse, error)
	Params(context.Context, *Empty) (*NetParams, error)
	Transactions(context.Context, *Empty) (*TransactionList, error)
	GetTransaction(context.Context, *Txid) (*Tx, error)
	GetFeePerByte(context.Context, *FeeLevelSelection) (*FeePerByte, error)
	Spend(context.Context, *SpendInfo) (*Txid, error)
	BumpFee(context.Context, *Txid) (*Txid, error)
	Peers(context.Context, *Empty) (*PeerList, error)
	AddWatchedAddress(context.Context, *Address) (*Empty, error)
	GetConfirmations(context.Context, *Txid) (*Confirmations, error)
	SweepAddress(context.Context, *SweepInfo) (*Txid, error)
	ReSyncBlockchain(context.Context, *Height) (*Empty, error)
	CreateMultisigSignature(context.Context, *CreateMultisigInfo) (*SignatureList, error)
	Multisign(context.Context, *MultisignInfo) (*RawTx, error)
	EstimateFee(context.Context, *EstimateFeeData) (*Fee, error)
	GetKey(context.Context, *Address) (*Key, error)
	ListKeys(context.Context, *Empty) (*Keys, error)
	ListAddresses(context.Context, *Empty) (*Addresses, error)
	ImportKey(context.Context, *ImportedKey) (*Empty, error)
	WalletNotify(*Empty, API_WalletNotifyServer) error
	DumpHeaders(*Empty, API_DumpHeadersServer) error
}

func RegisterAPIServer(s *grpc.Server, srv APIServer) {
	s.RegisterService(&_API_serviceDesc, srv)
}

func _API_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.API/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).Stop(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_CurrentAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeySelection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).CurrentAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.API/CurrentAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).CurrentAddress(ctx, req.(*KeySelection))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_NewAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeySelection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).NewAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.API/NewAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).NewAddress(ctx, req.(*KeySelection))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ChainTip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ChainTip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.API/ChainTip",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ChainTip(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_Balance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).Balance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.API/Balance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).Balance(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_MasterPrivateKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).MasterPrivateKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.API/MasterPrivateKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).MasterPrivateKey(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_MasterPublicKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).MasterPublicKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.API/MasterPublicKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).MasterPublicKey(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_HasKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Address)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).HasKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.API/HasKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).HasKey(ctx, req.(*Address))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.API/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).Params(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_Transactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).Transactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.API/Transactions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).Transactions(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Txid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.API/GetTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetTransaction(ctx, req.(*Txid))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetFeePerByte_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeeLevelSelection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetFeePerByte(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.API/GetFeePerByte",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetFeePerByte(ctx, req.(*FeeLevelSelection))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_Spend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SpendInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).Spend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.API/Spend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).Spend(ctx, req.(*SpendInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_BumpFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Txid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).BumpFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.API/BumpFee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).BumpFee(ctx, req.(*Txid))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_Peers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).Peers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.API/Peers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).Peers(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_AddWatchedAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Address)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).AddWatchedAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.API/AddWatchedAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).AddWatchedAddress(ctx, req.(*Address))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetConfirmations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Txid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetConfirmations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.API/GetConfirmations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetConfirmations(ctx, req.(*Txid))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_SweepAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SweepInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).SweepAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.API/SweepAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).SweepAddress(ctx, req.(*SweepInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ReSyncBlockchain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Height)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ReSyncBlockchain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.API/ReSyncBlockchain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ReSyncBlockchain(ctx, req.(*Height))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_CreateMultisigSignature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMultisigInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).CreateMultisigSignature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.API/CreateMultisigSignature",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).CreateMultisigSignature(ctx, req.(*CreateMultisigInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_Multisign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultisignInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).Multisign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.API/Multisign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).Multisign(ctx, req.(*MultisignInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_EstimateFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EstimateFeeData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).EstimateFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.API/EstimateFee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).EstimateFee(ctx, req.(*EstimateFeeData))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Address)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.API/GetKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetKey(ctx, req.(*Address))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ListKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ListKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.API/ListKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ListKeys(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ListAddresses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ListAddresses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.API/ListAddresses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ListAddresses(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ImportKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportedKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ImportKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.API/ImportKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ImportKey(ctx, req.(*ImportedKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_WalletNotify_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(APIServer).WalletNotify(m, &aPIWalletNotifyServer{stream})
}

type API_WalletNotifyServer interface {
	Send(*Tx) error
	grpc.ServerStream
}

type aPIWalletNotifyServer struct {
	grpc.ServerStream
}

func (x *aPIWalletNotifyServer) Send(m *Tx) error {
	return x.ServerStream.SendMsg(m)
}

func _API_DumpHeaders_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(APIServer).DumpHeaders(m, &aPIDumpHeadersServer{stream})
}

type API_DumpHeadersServer interface {
	Send(*Header) error
	grpc.ServerStream
}

type aPIDumpHeadersServer struct {
	grpc.ServerStream
}

func (x *aPIDumpHeadersServer) Send(m *Header) error {
	return x.ServerStream.SendMsg(m)
}

var _API_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.API",
	HandlerType: (*APIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Stop",
			Handler:    _API_Stop_Handler,
		},
		{
			MethodName: "CurrentAddress",
			Handler:    _API_CurrentAddress_Handler,
		},
		{
			MethodName: "NewAddress",
			Handler:    _API_NewAddress_Handler,
		},
		{
			MethodName: "ChainTip",
			Handler:    _API_ChainTip_Handler,
		},
		{
			MethodName: "Balance",
			Handler:    _API_Balance_Handler,
		},
		{
			MethodName: "MasterPrivateKey",
			Handler:    _API_MasterPrivateKey_Handler,
		},
		{
			MethodName: "MasterPublicKey",
			Handler:    _API_MasterPublicKey_Handler,
		},
		{
			MethodName: "HasKey",
			Handler:    _API_HasKey_Handler,
		},
		{
			MethodName: "Params",
			Handler:    _API_Params_Handler,
		},
		{
			MethodName: "Transactions",
			Handler:    _API_Transactions_Handler,
		},
		{
			MethodName: "GetTransaction",
			Handler:    _API_GetTransaction_Handler,
		},
		{
			MethodName: "GetFeePerByte",
			Handler:    _API_GetFeePerByte_Handler,
		},
		{
			MethodName: "Spend",
			Handler:    _API_Spend_Handler,
		},
		{
			MethodName: "BumpFee",
			Handler:    _API_BumpFee_Handler,
		},
		{
			MethodName: "Peers",
			Handler:    _API_Peers_Handler,
		},
		{
			MethodName: "AddWatchedAddress",
			Handler:    _API_AddWatchedAddress_Handler,
		},
		{
			MethodName: "GetConfirmations",
			Handler:    _API_GetConfirmations_Handler,
		},
		{
			MethodName: "SweepAddress",
			Handler:    _API_SweepAddress_Handler,
		},
		{
			MethodName: "ReSyncBlockchain",
			Handler:    _API_ReSyncBlockchain_Handler,
		},
		{
			MethodName: "CreateMultisigSignature",
			Handler:    _API_CreateMultisigSignature_Handler,
		},
		{
			MethodName: "Multisign",
			Handler:    _API_Multisign_Handler,
		},
		{
			MethodName: "EstimateFee",
			Handler:    _API_EstimateFee_Handler,
		},
		{
			MethodName: "GetKey",
			Handler:    _API_GetKey_Handler,
		},
		{
			MethodName: "ListKeys",
			Handler:    _API_ListKeys_Handler,
		},
		{
			MethodName: "ListAddresses",
			Handler:    _API_ListAddresses_Handler,
		},
		{
			MethodName: "ImportKey",
			Handler:    _API_ImportKey_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WalletNotify",
			Handler:       _API_WalletNotify_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DumpHeaders",
			Handler:       _API_DumpHeaders_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api.proto",
}

func init() { proto.RegisterFile("api.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1546 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x57, 0x5b, 0x6f, 0x23, 0x49,
	0x15, 0xf6, 0xdd, 0xee, 0x13, 0x3b, 0xf1, 0x14, 0xb0, 0x63, 0x99, 0x21, 0xe3, 0xa9, 0x5d, 0x84,
	0x37, 0x88, 0xec, 0xc6, 0x08, 0x34, 0x2f, 0x0b, 0xe4, 0xbe, 0x26, 0x93, 0xc4, 0x2a, 0x1b, 0x16,
	0x9e, 0x50, 0xb9, 0xfb, 0xc4, 0x69, 0x8d, 0xdd, 0xdd, 0xea, 0xae, 0x4e, 0x6c, 0x9e, 0xf8, 0x33,
	0xbc, 0x23, 0xf1, 0xcc, 0xdf, 0xe0, 0xf7, 0xa0, 0x3a, 0x7d, 0x4f, 0x26, 0x99, 0x11, 0x9a, 0xb7,
	0xaa, 0x73, 0x3e, 0x77, 0x9d, 0xcb, 0x57, 0xa7, 0x3e, 0x83, 0x21, 0x3d, 0x7b, 0xdf, 0xf3, 0x5d,
	0xe5, 0xb2, 0x8a, 0x37, 0xef, 0xbf, 0x5e, 0xb8, 0xee, 0x62, 0x89, 0xdf, 0x90, 0x65, 0x1e, 0xde,
	0x7c, 0xa3, 0xec, 0x15, 0x06, 0x4a, 0xae, 0xbc, 0x08, 0xc4, 0x9b, 0x50, 0x3f, 0x5d, 0x79, 0x6a,
	0xc3, 0xdf, 0x42, 0xfb, 0x02, 0x37, 0x53, 0x5c, 0xa2, 0xa9, 0x6c, 0xd7, 0x61, 0x43, 0x68, 0x7a,
	0xa1, 0xef, 0xb9, 0x01, 0xf6, 0xca, 0x83, 0xf2, 0x70, 0x7b, 0xb4, 0xbd, 0xef, 0xcd, 0xf7, 0x2f,
	0x70, 0x33, 0x89, 0xac, 0x22, 0x71, 0xf3, 0x9f, 0x41, 0xf3, 0xd0, 0xb2, 0x7c, 0x0c, 0x02, 0xc6,
	0xa0, 0x26, 0x2d, 0xcb, 0xa7, 0x5f, 0x18, 0x82, 0xd6, 0x7c, 0x00, 0x8d, 0xef, 0xd1, 0x5e, 0xdc,
	0x2a, 0xf6, 0x05, 0x34, 0x6e, 0x69, 0x45, 0xfe, 0x8e, 0x88, 0x77, 0xfc, 0x8f, 0xd0, 0x3a, 0x92,
	0x4b, 0xe9, 0x98, 0x18, 0xb0, 0x57, 0x60, 0x98, 0xae, 0x73, 0x63, 0xfb, 0x2b, 0xb4, 0x08, 0x56,
	0x13, 0x99, 0x81, 0x0d, 0x60, 0x2b, 0x74, 0x32, 0x7f, 0x85, 0xfc, 0x79, 0x13, 0x7f, 0x09, 0xd5,
	0x0b, 0xdc, 0xb0, 0x2e, 0x54, 0xdf, 0xe3, 0x26, 0x8e, 0x43, 0x2f, 0xf9, 0x97, 0x50, 0xbb, 0xc0,
	0x4d, 0xc0, 0x7e, 0x0a, 0xb5, 0xf7, 0xb8, 0x09, 0x7a, 0xe5, 0x41, 0x75, 0xb8, 0x35, 0x6a, 0xc6,
	0x49, 0x09, 0x32, 0xf2, 0xdf, 0x82, 0x11, 0xa7, 0x82, 0x01, 0xfb, 0x1a, 0x0c, 0x99, 0x6c, 0x62,
	0xf8, 0x96, 0x86, 0xc7, 0x08, 0x91, 0x79, 0x39, 0x87, 0xf6, 0x91, 0xeb, 0x2e, 0x05, 0x06, 0x9e,
	0xeb, 0x04, 0xa8, 0xeb, 0x30, 0x77, 0xdd, 0x25, 0x9d, 0xdf, 0x12, 0xb4, 0xe6, 0xaf, 0xc1, 0xb8,
	0x42, 0x35, 0x91, 0xbe, 0x5c, 0x51, 0xa1, 0x1c, 0xb9, 0xc2, 0xa4, 0x50, 0x7a, 0xcd, 0xbf, 0x83,
	0x9d, 0x99, 0x2f, 0x9d, 0x40, 0x52, 0x03, 0xde, 0xd9, 0x81, 0x62, 0x7b, 0xd0, 0x56, 0x99, 0x29,
	0x89, 0xa2, 0xa1, 0xa3, 0x98, 0xad, 0x45, 0xc1, 0xc7, 0xff, 0x55, 0x86, 0xca, 0x6c, 0xad, 0xbf,
	0xac, 0xd6, 0xb6, 0x95, 0x7c, 0x59, 0xaf, 0xd9, 0x8f, 0xa1, 0x7e, 0x27, 0x97, 0x21, 0x52, 0xc1,
	0xaa, 0x22, 0xda, 0xe4, 0xda, 0x51, 0x1d, 0x94, 0x87, 0xf5, 0xa4, 0x1d, 0xec, 0x2d, 0x18, 0x29,
	0x4b, 0x7a, 0xb5, 0x41, 0x79, 0xb8, 0x35, 0xea, 0xef, 0x47, 0x3c, 0xda, 0x4f, 0x78, 0xb4, 0x3f,
	0x4b, 0x10, 0x22, 0x03, 0xeb, 0xe6, 0xdd, 0x4b, 0x65, 0xde, 0x5e, 0x3b, 0xcb, 0x4d, 0xaf, 0x4e,
	0xb9, 0x67, 0x06, 0xdd, 0x13, 0x5f, 0xde, 0xf7, 0x1a, 0x83, 0xf2, 0xb0, 0x2d, 0xf4, 0x92, 0xf7,
	0xa1, 0x36, 0xd3, 0xf1, 0x31, 0xa8, 0xdd, 0xca, 0xe0, 0x36, 0x89, 0x59, 0xaf, 0xf9, 0x77, 0xf0,
	0xe2, 0x0c, 0xf1, 0x1d, 0xde, 0xe1, 0x32, 0x4f, 0xca, 0xd6, 0x4d, 0x6c, 0x8c, 0x59, 0xd9, 0xd6,
	0xb5, 0x48, 0x80, 0x22, 0xf5, 0xf2, 0x5d, 0x80, 0x33, 0xc4, 0x09, 0xfa, 0x47, 0x1b, 0x85, 0xfa,
	0xe8, 0x1b, 0xc4, 0x98, 0x4f, 0x7a, 0xa9, 0x79, 0x72, 0x86, 0x1f, 0x72, 0x2c, 0xc0, 0x98, 0x7a,
	0xe8, 0x58, 0x63, 0xe7, 0xc6, 0x65, 0x3d, 0x68, 0xc6, 0x4d, 0x8e, 0x63, 0x4b, 0xb6, 0xba, 0x78,
	0x72, 0xe5, 0x86, 0x8e, 0x8a, 0x49, 0x18, 0xef, 0x0a, 0x11, 0x56, 0x9f, 0x8d, 0x70, 0x0f, 0x5a,
	0x13, 0x44, 0x9f, 0xfa, 0xbc, 0x0b, 0x75, 0x0f, 0xd1, 0x4f, 0x1a, 0xdc, 0xd2, 0x3f, 0xd1, 0x4e,
	0x11, 0x99, 0xf9, 0x7f, 0x2b, 0x50, 0xd3, 0xfb, 0x67, 0x02, 0x7a, 0x05, 0xc6, 0x7c, 0xa3, 0x30,
	0x98, 0x62, 0x1a, 0x53, 0x66, 0x60, 0x5f, 0x41, 0x87, 0x36, 0x02, 0x4d, 0xb4, 0xef, 0xd0, 0xa2,
	0xd8, 0x6a, 0xa2, 0x68, 0x8c, 0x2f, 0x9f, 0x83, 0xa6, 0x42, 0x8b, 0x3a, 0xdf, 0x12, 0x99, 0x81,
	0x6d, 0x43, 0x65, 0x7c, 0x42, 0x6d, 0xad, 0x8b, 0xca, 0xf8, 0x44, 0xa3, 0x97, 0x32, 0x50, 0x47,
	0x4b, 0xd7, 0x7c, 0x4f, 0x5d, 0xad, 0x8b, 0xcc, 0xc0, 0x86, 0xb0, 0x43, 0x64, 0x31, 0xdd, 0xe5,
	0x9f, 0xd1, 0x0f, 0x6c, 0xd7, 0xe9, 0x35, 0xe9, 0xd6, 0x3f, 0x34, 0xb3, 0x3e, 0xb4, 0x02, 0xf4,
	0xef, 0x6c, 0x13, 0x83, 0x5e, 0x8b, 0x92, 0x4a, 0xf7, 0xfa, 0x8c, 0x30, 0x40, 0xff, 0x70, 0xa1,
	0xb3, 0x32, 0xc8, 0x99, 0x19, 0xd8, 0x1f, 0xa0, 0xa3, 0xc9, 0x77, 0x9c, 0xc6, 0x0c, 0x1f, 0x65,
	0x6b, 0xf1, 0x07, 0xfc, 0x37, 0xd0, 0x39, 0x8e, 0x66, 0x87, 0xa4, 0x5b, 0xa4, 0x0b, 0x65, 0xe6,
	0x0d, 0xf1, 0xa8, 0x2a, 0x1a, 0xf9, 0x19, 0xd4, 0xfe, 0xa4, 0xd6, 0xee, 0x53, 0x97, 0xcd, 0x76,
	0x2c, 0x5c, 0x53, 0x13, 0x3a, 0x22, 0xda, 0x64, 0x57, 0x30, 0x2a, 0x7c, 0xb4, 0xe1, 0xff, 0x2c,
	0x83, 0x31, 0xbd, 0x47, 0xf4, 0x88, 0x6d, 0xbb, 0x50, 0x0f, 0xd5, 0xda, 0x2d, 0xb0, 0x40, 0x1f,
	0x23, 0x22, 0x73, 0xbe, 0xf9, 0x95, 0x62, 0xf3, 0xe3, 0x71, 0x57, 0x4d, 0xc7, 0x1d, 0xe3, 0xd0,
	0xf6, 0xd1, 0x42, 0x5c, 0x4d, 0x4d, 0xdf, 0xf6, 0x14, 0x75, 0xb3, 0x2d, 0x0a, 0xb6, 0x02, 0x57,
	0xeb, 0xcf, 0x72, 0xf5, 0x00, 0xea, 0x63, 0xc7, 0x0b, 0xd5, 0xa7, 0x27, 0xcc, 0x8f, 0xa0, 0x71,
	0x1d, 0x2a, 0xfd, 0x1b, 0x0e, 0xed, 0x80, 0x0e, 0x9c, 0x84, 0xf3, 0x8b, 0x78, 0x28, 0xb7, 0x45,
	0xc1, 0x56, 0x9c, 0x50, 0x69, 0x79, 0x7e, 0x0f, 0xc6, 0xd4, 0x5e, 0x38, 0x52, 0x85, 0x3e, 0x66,
	0xc7, 0x94, 0xf3, 0x75, 0x7d, 0x05, 0x46, 0x90, 0x40, 0xe8, 0xc7, 0x6d, 0x91, 0x19, 0xf8, 0xbf,
	0xcb, 0xc0, 0x8e, 0x7d, 0x94, 0x0a, 0x2f, 0xc3, 0xa5, 0xb2, 0x03, 0x7b, 0x41, 0x85, 0x7e, 0x03,
	0x0d, 0x5b, 0xa7, 0x93, 0x54, 0xda, 0xd0, 0x69, 0x53, 0x82, 0x22, 0x76, 0xb0, 0xaf, 0xa0, 0xe9,
	0x52, 0xf8, 0xba, 0xd6, 0x1a, 0x03, 0x1a, 0x13, 0x65, 0x24, 0x12, 0xd7, 0xff, 0x59, 0xf7, 0x5d,
	0x80, 0x9b, 0x74, 0x36, 0x51, 0xe5, 0x6b, 0x22, 0x67, 0xe1, 0x23, 0xe8, 0xa4, 0x69, 0xd3, 0x78,
	0x78, 0x03, 0xb5, 0xc0, 0x5e, 0x24, 0xd1, 0x76, 0x74, 0x24, 0x29, 0x40, 0x90, 0x8b, 0xff, 0xa3,
	0x02, 0x9d, 0x24, 0x47, 0xe7, 0xf3, 0x26, 0x19, 0x9d, 0x7e, 0xd0, 0xab, 0x3e, 0x75, 0xfa, 0x41,
	0x0c, 0x19, 0xf5, 0x6a, 0x4f, 0x41, 0x46, 0x8f, 0x0a, 0x53, 0xff, 0x68, 0x61, 0x1a, 0x0f, 0x0b,
	0x43, 0x33, 0xce, 0x77, 0xa5, 0x65, 0xca, 0x40, 0xd1, 0x34, 0x69, 0x89, 0xcc, 0xc0, 0x5f, 0x42,
	0x5d, 0xc8, 0xfb, 0xd9, 0x5a, 0x0f, 0x2a, 0xb5, 0x8e, 0x69, 0x56, 0x51, 0x6b, 0xfe, 0x77, 0xd8,
	0x39, 0x0d, 0x94, 0xbd, 0x92, 0x0a, 0xcf, 0x10, 0x4f, 0xa4, 0x92, 0x9f, 0xaf, 0x38, 0xc5, 0x90,
	0xab, 0x8f, 0x7a, 0xb9, 0xab, 0xd5, 0x8f, 0xb4, 0xd0, 0xd7, 0xfc, 0x45, 0x47, 0xf9, 0x89, 0x28,
	0x89, 0x36, 0xfc, 0x6f, 0xb0, 0x35, 0x5e, 0x79, 0xae, 0xaf, 0xd0, 0xfa, 0xa0, 0x6e, 0x61, 0xbf,
	0x83, 0xb6, 0xa9, 0x19, 0x6c, 0xbb, 0xce, 0x89, 0x54, 0x11, 0xc7, 0x9f, 0x1f, 0x71, 0x05, 0xfc,
	0xde, 0x10, 0x20, 0x13, 0x6d, 0xac, 0x0d, 0xad, 0xf1, 0xd5, 0xec, 0x54, 0x5c, 0x1d, 0xbe, 0xeb,
	0x96, 0xf4, 0xee, 0xf4, 0x2f, 0xf1, 0xae, 0xbc, 0x37, 0x82, 0x56, 0x72, 0xf5, 0xc9, 0x73, 0x7c,
	0x7d, 0x75, 0x7d, 0x39, 0x3e, 0xee, 0x96, 0x18, 0x40, 0xe3, 0xea, 0x5a, 0x5c, 0x6a, 0x94, 0xf6,
	0x4c, 0xc4, 0xf8, 0x5a, 0x8c, 0x67, 0x7f, 0xed, 0x56, 0x46, 0xff, 0x31, 0xa0, 0x7a, 0x38, 0x19,
	0xb3, 0x5d, 0xa8, 0x4d, 0x95, 0xeb, 0x31, 0xaa, 0x23, 0x09, 0xca, 0x7e, 0xb6, 0xe4, 0x25, 0x76,
	0x00, 0xdb, 0xc7, 0xa1, 0xef, 0xa3, 0xa3, 0x12, 0xa9, 0xd8, 0x8d, 0x95, 0x57, 0xfa, 0xb8, 0xf7,
	0xf3, 0xe2, 0x8a, 0x97, 0xd8, 0xaf, 0x00, 0xae, 0xf0, 0xfe, 0x93, 0xe1, 0x5f, 0x42, 0xeb, 0xf8,
	0x56, 0xda, 0xce, 0xcc, 0x2e, 0x44, 0x41, 0x4d, 0x8b, 0xf4, 0x27, 0x2f, 0xe9, 0x9e, 0xc6, 0x4a,
	0x33, 0x8f, 0xa1, 0xa9, 0x97, 0x28, 0x50, 0x5e, 0x62, 0x43, 0xe8, 0x5e, 0xca, 0x40, 0xa1, 0x3f,
	0xf1, 0xed, 0x3b, 0xa9, 0x50, 0x37, 0x26, 0x07, 0x4f, 0x34, 0x23, 0x2f, 0xb1, 0x5f, 0xc0, 0x4e,
	0x8c, 0x0c, 0xe7, 0x4b, 0xdb, 0x7c, 0x1a, 0xf8, 0x35, 0x34, 0xbe, 0x97, 0x81, 0xf6, 0xe7, 0xc3,
	0xee, 0x53, 0x56, 0x79, 0xe5, 0x48, 0x31, 0x36, 0x62, 0x91, 0x98, 0xfb, 0x14, 0x5d, 0xa9, 0x54,
	0x3e, 0xf2, 0x12, 0xfb, 0x16, 0xda, 0x39, 0xb1, 0x58, 0xc0, 0xfe, 0x88, 0xe4, 0x61, 0x51, 0x49,
	0xd2, 0x77, 0xb7, 0xcf, 0x51, 0xe5, 0xec, 0xac, 0x15, 0xe9, 0x48, 0xdb, 0xea, 0xc7, 0x8a, 0x92,
	0x97, 0xd8, 0x5b, 0xe8, 0x9c, 0xa3, 0xca, 0x49, 0xa7, 0x9f, 0xe4, 0x9f, 0x84, 0xac, 0xfa, 0xdb,
	0xb1, 0x39, 0xe1, 0x79, 0x89, 0x71, 0xa8, 0x93, 0x70, 0x62, 0xd1, 0xf5, 0x4f, 0x34, 0x54, 0x3f,
	0x3d, 0x85, 0x97, 0xd8, 0x6b, 0x68, 0x1e, 0x85, 0x2b, 0x4f, 0x2b, 0xaf, 0xec, 0xf0, 0x3c, 0x80,
	0x43, 0x5d, 0xeb, 0x9c, 0xe0, 0x51, 0x7b, 0x12, 0xa9, 0x44, 0xc4, 0x78, 0x71, 0x68, 0x59, 0x3f,
	0x68, 0x5d, 0x89, 0x56, 0xc2, 0x8f, 0x42, 0x59, 0x1f, 0x50, 0xaf, 0x7b, 0x8e, 0xaa, 0xf8, 0xca,
	0x67, 0x87, 0xbf, 0xd0, 0xab, 0x82, 0x93, 0xba, 0xd5, 0xa6, 0x57, 0x39, 0xf9, 0x78, 0x94, 0x51,
	0xf2, 0x4e, 0x17, 0x02, 0xfe, 0x25, 0x74, 0x05, 0x4e, 0x37, 0x8e, 0x49, 0xaa, 0xc7, 0xd4, 0x0c,
	0x64, 0x39, 0xce, 0x15, 0x43, 0x39, 0x83, 0x97, 0xc5, 0xd7, 0x28, 0x7b, 0xdd, 0xbe, 0xa0, 0x38,
	0x1e, 0x3d, 0x55, 0x51, 0x7c, 0x85, 0xd7, 0x80, 0x0e, 0x35, 0xd2, 0x59, 0xcf, 0x08, 0x51, 0x18,
	0xfd, 0xd1, 0xa1, 0x34, 0x0b, 0xa9, 0x5c, 0x5b, 0xb9, 0xe9, 0xc7, 0x88, 0x1d, 0x0f, 0xc6, 0x61,
	0xc4, 0xd4, 0x33, 0xd4, 0x6d, 0x1c, 0x40, 0xe3, 0x1c, 0xd5, 0x23, 0xa6, 0xe6, 0xb8, 0xfc, 0x06,
	0x5a, 0x3a, 0x0e, 0xfa, 0x37, 0x95, 0x6b, 0x53, 0x2b, 0x46, 0x04, 0x14, 0x60, 0x47, 0x43, 0xb2,
	0xff, 0x52, 0x0f, 0xa9, 0x9c, 0x7a, 0xa8, 0xda, 0x46, 0x34, 0x02, 0xf5, 0xa1, 0x3b, 0x34, 0x88,
	0xb3, 0x89, 0x58, 0x2c, 0xe0, 0xcf, 0xa1, 0xfd, 0x83, 0x5c, 0x2e, 0x51, 0x5d, 0xb9, 0xca, 0xbe,
	0x29, 0x5c, 0xb6, 0x94, 0xc2, 0xdf, 0x96, 0xd9, 0x10, 0xb6, 0x4e, 0xc2, 0x95, 0x17, 0x0d, 0xde,
	0xe0, 0x03, 0xe3, 0x40, 0xdb, 0x35, 0x72, 0xde, 0xa0, 0xf9, 0xf9, 0xeb, 0xff, 0x05, 0x00, 0x00,
	0xff, 0xff, 0xf6, 0xbc, 0x7d, 0x54, 0x37, 0x0f, 0x00, 0x00,
}
